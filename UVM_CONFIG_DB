module adder(
  input [3:0] a,b,
  output [4:0] y
);
  
  
  assign y = a + b;
  
endmodule

//////////////////////////////////////////

interface adder_if;
  logic [3:0] a;
  logic [3:0] b;
  logic [4:0] y;
  
endinterface

========================================================================

`include "uvm_macros.svh"
import uvm_pkg::*;

class drv extends uvm_driver;
  
  `uvm_component_utils(drv);
  
  virtual adder_if aif;
  
  function new(string inst = "drv", uvm_component parent = null);
    super.new(inst, parent);
  endfunction
  
  virtual function void build_phase(uvm_phase phase);
    
    super.build_phase(phase);
    
    if(!uvm_config_db #(virtual adder_if) :: get(this, "", "aif", aif))
      `uvm_error("drv","Unable to access Interface");
    
  endfunction
  
  virtual task run_phase(uvm_phase phase);
    phase.raise_objection(this);
     for(int i = 0; i < 10; i++) begin
      aif.a <= $urandom;
      aif.b <= $urandom;
      #10;
     end
    phase.drop_objection(this);
  endtask
  
endclass

module tb;
  adder_if aif(); //interface
  
  adder dut(.a(aif.a), .b(aif.b), .y(aif.y)); //instantiation of dut
  
  initial begin
    uvm_config_db #(virtual adder_if) :: set(null, "uvm_test_top","aif", aif); // set method
    run_test("drv");  
  end
  
  initial begin
    $dumpvars;
    $dumpfile("dump.vcd");
  end
  
endmodule

====================================================================================
-------------------------------- OUTPUT -------------------------------------------
====================================================================================

a[3:0]
3
7
1
f
3
6
e
1
b
5
b[3:0]
5
6
b
a
2
f
4
5
1
8
sum[4:0]
0d
0d
0c
19
05
15
12
06
0c
0d
